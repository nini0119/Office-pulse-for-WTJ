{
    "name": "Integration Webhooks",
    "flow": [
        {
            "id": 4,
            "module": "gateway:CustomWebHook",
            "version": 1,
            "parameters": {
                "hook": 2475480,
                "maxResults": 1
            },
            "mapper": {},
            "metadata": {
                "designer": {
                    "x": -643,
                    "y": -37
                },
                "restore": {
                    "parameters": {
                        "hook": {
                            "data": {
                                "editable": "true"
                            },
                            "label": "My gateway-webhook webhook"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "hook",
                        "type": "hook:gateway-webhook",
                        "label": "Webhook",
                        "required": true
                    },
                    {
                        "name": "maxResults",
                        "type": "number",
                        "label": "Maximum number of results"
                    }
                ]
            }
        },
        {
            "id": 8,
            "module": "google-sheets:filterRows",
            "version": 2,
            "parameters": {
                "__IMTCONN__": 8750298
            },
            "mapper": {
                "from": "drive",
                "limit": "1000",
                "sheetId": "Sheet1",
                "sortOrder": "asc",
                "spreadsheetId": "1gYmyJWe-KXzNubPTmbb5GdEY3DQcFWDF6c9wUF2ERyg",
                "tableFirstRow": "A1:Z1",
                "includesHeaders": true,
                "valueRenderOption": "FORMATTED_VALUE",
                "dateTimeRenderOption": "FORMATTED_STRING"
            },
            "metadata": {
                "designer": {
                    "x": -257,
                    "y": -6
                },
                "restore": {
                    "expect": {
                        "from": {
                            "label": "Select from My Drive"
                        },
                        "orderBy": {
                            "mode": "chose"
                        },
                        "sheetId": {
                            "mode": "chose",
                            "label": "Sheet1"
                        },
                        "sortOrder": {
                            "mode": "chose",
                            "label": "Ascending"
                        },
                        "spreadsheetId": {
                            "mode": "chose",
                            "label": "Grille de preÃÅsence Mai 2025 - 2 au 6 juin.xlsx"
                        },
                        "tableFirstRow": {
                            "label": "A-Z"
                        },
                        "includesHeaders": {
                            "mode": "chose",
                            "label": "Yes"
                        },
                        "valueRenderOption": {
                            "mode": "chose",
                            "label": "Formatted value"
                        },
                        "dateTimeRenderOption": {
                            "mode": "chose",
                            "label": "Formatted string"
                        }
                    },
                    "parameters": {
                        "__IMTCONN__": {
                            "data": {
                                "scoped": "true",
                                "connection": "google"
                            },
                            "label": "My Google connection (team5@eugeniaschool.com)"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "__IMTCONN__",
                        "type": "account:google",
                        "label": "Connection",
                        "required": true
                    }
                ],
                "expect": [
                    {
                        "name": "from",
                        "type": "select",
                        "label": "Search Method",
                        "required": true,
                        "validate": {
                            "enum": [
                                "drive",
                                "share"
                            ]
                        }
                    },
                    {
                        "name": "valueRenderOption",
                        "type": "select",
                        "label": "Value render option",
                        "validate": {
                            "enum": [
                                "FORMATTED_VALUE",
                                "UNFORMATTED_VALUE",
                                "FORMULA"
                            ]
                        }
                    },
                    {
                        "name": "dateTimeRenderOption",
                        "type": "select",
                        "label": "Date and time render option",
                        "validate": {
                            "enum": [
                                "SERIAL_NUMBER",
                                "FORMATTED_STRING"
                            ]
                        }
                    },
                    {
                        "name": "limit",
                        "type": "uinteger",
                        "label": "Limit"
                    },
                    {
                        "name": "spreadsheetId",
                        "type": "select",
                        "label": "Spreadsheet ID",
                        "required": true
                    },
                    {
                        "name": "sheetId",
                        "type": "select",
                        "label": "Sheet Name",
                        "required": true
                    },
                    {
                        "name": "includesHeaders",
                        "type": "select",
                        "label": "Table contains headers",
                        "required": true,
                        "validate": {
                            "enum": [
                                true,
                                false
                            ]
                        }
                    },
                    {
                        "name": "tableFirstRow",
                        "type": "select",
                        "label": "Column range",
                        "required": true,
                        "validate": {
                            "enum": [
                                "A1:Z1",
                                "A1:BZ1",
                                "A1:CZ1",
                                "A1:DZ1",
                                "A1:MZ1",
                                "A1:ZZ1",
                                "A1:AZZ1",
                                "A1:BZZ1",
                                "A1:CZZ1",
                                "A1:DZZ1",
                                "A1:MZZ1",
                                "A1:ZZZ1"
                            ]
                        }
                    },
                    {
                        "name": "filter",
                        "type": "filter",
                        "label": "Filter",
                        "options": "rpc://google-sheets/2/rpcGetFilterKeys?includesHeaders=true"
                    },
                    {
                        "name": "orderBy",
                        "type": "select",
                        "label": "Order by"
                    },
                    {
                        "name": "sortOrder",
                        "type": "select",
                        "label": "Sort order",
                        "validate": {
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    }
                ],
                "interface": [
                    {
                        "name": "__IMTLENGTH__",
                        "type": "uinteger",
                        "label": "Total number of bundles"
                    },
                    {
                        "name": "__IMTINDEX__",
                        "type": "uinteger",
                        "label": "Bundle order position"
                    },
                    {
                        "name": "__ROW_NUMBER__",
                        "type": "number",
                        "label": "Row number"
                    },
                    {
                        "name": "__SPREADSHEET_ID__",
                        "type": "text",
                        "label": "Spreadsheet ID"
                    },
                    {
                        "name": "__SHEET__",
                        "type": "text",
                        "label": "Sheet"
                    },
                    {
                        "name": "0",
                        "type": "text",
                        "label": "id (A)"
                    },
                    {
                        "name": "1",
                        "type": "text",
                        "label": "nom (B)"
                    },
                    {
                        "name": "2",
                        "type": "text",
                        "label": "Lundi (C)"
                    },
                    {
                        "name": "3",
                        "type": "text",
                        "label": "Mardi (D)"
                    },
                    {
                        "name": "4",
                        "type": "text",
                        "label": "Mercredi (E)"
                    },
                    {
                        "name": "5",
                        "type": "text",
                        "label": "Jeudi (F)"
                    },
                    {
                        "name": "6",
                        "type": "text",
                        "label": "Vendredi (G)"
                    },
                    {
                        "name": "7",
                        "type": "text",
                        "label": "(H)"
                    },
                    {
                        "name": "8",
                        "type": "text",
                        "label": "(I)"
                    },
                    {
                        "name": "9",
                        "type": "text",
                        "label": "(J)"
                    },
                    {
                        "name": "10",
                        "type": "text",
                        "label": "(K)"
                    },
                    {
                        "name": "11",
                        "type": "text",
                        "label": "(L)"
                    },
                    {
                        "name": "12",
                        "type": "text",
                        "label": "(M)"
                    },
                    {
                        "name": "13",
                        "type": "text",
                        "label": "(N)"
                    },
                    {
                        "name": "14",
                        "type": "text",
                        "label": "(O)"
                    },
                    {
                        "name": "15",
                        "type": "text",
                        "label": "(P)"
                    },
                    {
                        "name": "16",
                        "type": "text",
                        "label": "(Q)"
                    },
                    {
                        "name": "17",
                        "type": "text",
                        "label": "(R)"
                    },
                    {
                        "name": "18",
                        "type": "text",
                        "label": "(S)"
                    },
                    {
                        "name": "19",
                        "type": "text",
                        "label": "(T)"
                    },
                    {
                        "name": "20",
                        "type": "text",
                        "label": "(U)"
                    },
                    {
                        "name": "21",
                        "type": "text",
                        "label": "(V)"
                    },
                    {
                        "name": "22",
                        "type": "text",
                        "label": "(W)"
                    },
                    {
                        "name": "23",
                        "type": "text",
                        "label": "(X)"
                    },
                    {
                        "name": "24",
                        "type": "text",
                        "label": "(Y)"
                    },
                    {
                        "name": "25",
                        "type": "text",
                        "label": "(Z)"
                    }
                ]
            }
        },
        {
            "id": 14,
            "module": "builtin:BasicRouter",
            "version": 1,
            "mapper": null,
            "metadata": {
                "designer": {
                    "x": 43,
                    "y": -6
                }
            },
            "routes": [
                {
                    "flow": [
                        {
                            "id": 9,
                            "module": "util:TextAggregator",
                            "version": 1,
                            "parameters": {
                                "feeder": 8,
                                "rowSeparator": "\n"
                            },
                            "mapper": {
                                "value": "id:{{8.`0`}},nom:{{8.`1`}}, lundi : {{8.`2`}}, mardi : {{8.`3`}}, Mercredi:{{8.`4`}}, Jeudi:{{8.`5`}}, Vendredi: {{8.`6`}}"
                            },
                            "metadata": {
                                "designer": {
                                    "x": 343,
                                    "y": -6
                                },
                                "restore": {
                                    "extra": {
                                        "feeder": {
                                            "label": "Google Sheets - Search Rows [8]"
                                        }
                                    },
                                    "parameters": {
                                        "rowSeparator": {
                                            "label": "New row"
                                        }
                                    }
                                },
                                "parameters": [
                                    {
                                        "name": "rowSeparator",
                                        "type": "select",
                                        "label": "Row separator",
                                        "validate": {
                                            "enum": [
                                                "\n",
                                                "\t",
                                                "other"
                                            ]
                                        }
                                    }
                                ],
                                "expect": [
                                    {
                                        "name": "value",
                                        "type": "text",
                                        "label": "Text"
                                    }
                                ],
                                "advanced": true
                            }
                        },
                        {
                            "id": 12,
                            "module": "google-calendar:searchEvents",
                            "version": 5,
                            "parameters": {
                                "__IMTCONN__": 8750298
                            },
                            "mapper": {
                                "limit": "10",
                                "timeMax": "30/06/2025 20:11",
                                "timeMin": "01/06/2025 20:08",
                                "calendar": "c_2303903a452e878a24e8a232b14e13424b8838aec3332bb97b973420b19291cb@group.calendar.google.com",
                                "singleEvents": false
                            },
                            "metadata": {
                                "designer": {
                                    "x": 580,
                                    "y": 30
                                },
                                "restore": {
                                    "expect": {
                                        "orderBy": {
                                            "mode": "chose",
                                            "label": "Empty"
                                        },
                                        "calendar": {
                                            "mode": "chose",
                                            "label": "WTJ"
                                        },
                                        "eventTypes": {
                                            "mode": "chose"
                                        }
                                    },
                                    "parameters": {
                                        "__IMTCONN__": {
                                            "data": {
                                                "scoped": "true",
                                                "connection": "google"
                                            },
                                            "label": "My Google connection (team5@eugeniaschool.com)"
                                        }
                                    }
                                },
                                "parameters": [
                                    {
                                        "name": "__IMTCONN__",
                                        "type": "account:google",
                                        "label": "Connection",
                                        "required": true
                                    }
                                ],
                                "expect": [
                                    {
                                        "name": "calendar",
                                        "type": "select",
                                        "label": "Calendar ID",
                                        "required": true
                                    },
                                    {
                                        "name": "timeMin",
                                        "time": true,
                                        "type": "date",
                                        "label": "Start Date"
                                    },
                                    {
                                        "name": "timeMax",
                                        "time": true,
                                        "type": "date",
                                        "label": "End Date"
                                    },
                                    {
                                        "name": "updatedMin",
                                        "time": true,
                                        "type": "date",
                                        "label": "Updated from"
                                    },
                                    {
                                        "name": "singleEvents",
                                        "type": "boolean",
                                        "label": "Single Events",
                                        "required": true
                                    },
                                    {
                                        "name": "q",
                                        "type": "text",
                                        "label": "Query"
                                    },
                                    {
                                        "name": "eventTypes",
                                        "type": "select",
                                        "label": "Event Types",
                                        "multiple": true,
                                        "validate": {
                                            "enum": [
                                                "default",
                                                "fromGmail",
                                                "focusTime",
                                                "outOfOffice",
                                                "workingLocation"
                                            ]
                                        }
                                    },
                                    {
                                        "name": "orderBy",
                                        "type": "select",
                                        "label": "Order By",
                                        "validate": {
                                            "enum": [
                                                "startTime",
                                                "updated"
                                            ]
                                        }
                                    },
                                    {
                                        "name": "limit",
                                        "type": "uinteger",
                                        "label": "Limit"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 13,
                            "module": "openai-gpt-3:messageAssistantAdvanced",
                            "version": 1,
                            "parameters": {
                                "__IMTCONN__": 8790559
                            },
                            "mapper": {
                                "role": "user",
                                "message": "voici mon code html:\n<!DOCTYPE html>\r\n<html lang=\"fr\">\r\n\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Calendrier Planning des Pr√©sences</title>\r\n    <style>\r\n        * {\r\n            margin: 0;\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n        }\r\n        \r\n        body {\r\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            min-height: 100vh;\r\n            padding: 20px;\r\n        }\r\n        \r\n        .container {\r\n            max-width: 1600px;\r\n            margin: 0 auto;\r\n        }\r\n        \r\n        .header {\r\n            background: rgba(255, 255, 255, 0.95);\r\n            backdrop-filter: blur(10px);\r\n            border-radius: 20px;\r\n            padding: 30px;\r\n            text-align: center;\r\n            margin-bottom: 30px;\r\n            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\r\n        }\r\n        \r\n        .header h1 {\r\n            font-size: 3rem;\r\n            background: linear-gradient(135deg, #4CAF50, #45a049);\r\n            -webkit-background-clip: text;\r\n            -webkit-text-fill-color: transparent;\r\n            background-clip: text;\r\n            margin-bottom: 10px;\r\n            font-weight: 700;\r\n        }\r\n        \r\n        .header-controls {\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            gap: 20px;\r\n            margin-top: 20px;\r\n        }\r\n        \r\n        .month-nav {\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 15px;\r\n        }\r\n        \r\n        .nav-btn {\r\n            background: linear-gradient(135deg, #4CAF50, #45a049);\r\n            color: white;\r\n            border: none;\r\n            width: 40px;\r\n            height: 40px;\r\n            border-radius: 50%;\r\n            cursor: pointer;\r\n            font-size: 16px;\r\n            font-weight: 600;\r\n            transition: transform 0.2s, box-shadow 0.2s;\r\n        }\r\n        \r\n        .nav-btn:hover {\r\n            transform: scale(1.1);\r\n            box-shadow: 0 5px 15px rgba(76, 175, 80, 0.3);\r\n        }\r\n        \r\n        .current-month {\r\n            font-size: 1.5rem;\r\n            font-weight: 600;\r\n            color: #333;\r\n            min-width: 200px;\r\n        }\r\n        \r\n        .main-layout {\r\n            display: grid;\r\n            grid-template-columns: 2fr 1fr;\r\n            gap: 30px;\r\n        }\r\n        \r\n        .calendar-section {\r\n            background: rgba(255, 255, 255, 0.95);\r\n            backdrop-filter: blur(10px);\r\n            border-radius: 20px;\r\n            padding: 30px;\r\n            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\r\n        }\r\n        \r\n        .calendar-grid {\r\n            display: grid;\r\n            grid-template-columns: repeat(7, 1fr);\r\n            gap: 2px;\r\n            margin-top: 20px;\r\n        }\r\n        \r\n        .calendar-header {\r\n            background: linear-gradient(135deg, #4CAF50, #45a049);\r\n            color: white;\r\n            padding: 15px 5px;\r\n            text-align: center;\r\n            font-weight: 600;\r\n            font-size: 14px;\r\n            text-transform: uppercase;\r\n            letter-spacing: 1px;\r\n        }\r\n        \r\n        .calendar-day {\r\n            background: #f8f9fa;\r\n            min-height: 120px;\r\n            padding: 10px 5px;\r\n            border-radius: 8px;\r\n            cursor: pointer;\r\n            transition: all 0.3s;\r\n            position: relative;\r\n            overflow: hidden;\r\n        }\r\n        \r\n        .calendar-day:hover {\r\n            transform: translateY(-2px);\r\n            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);\r\n        }\r\n        \r\n        .calendar-day.other-month {\r\n            opacity: 0.3;\r\n            background: #e9ecef;\r\n        }\r\n        \r\n        .calendar-day.today {\r\n            background: linear-gradient(135deg, #e8f5e8, #f1f8e9);\r\n            border: 2px solid #4CAF50;\r\n        }\r\n        \r\n        .calendar-day.selected {\r\n            background: linear-gradient(135deg, #2196F3, #1976D2);\r\n            color: white;\r\n        }\r\n        \r\n        .day-number {\r\n            font-weight: 600;\r\n            font-size: 16px;\r\n            margin-bottom: 8px;\r\n        }\r\n        \r\n        .day-summary {\r\n            font-size: 11px;\r\n            display: flex;\r\n            flex-wrap: wrap;\r\n            gap: 2px;\r\n        }\r\n        \r\n        .status-indicator {\r\n            width: 8px;\r\n            height: 8px;\r\n            border-radius: 50%;\r\n            display: inline-block;\r\n        }\r\n        \r\n        .status-indicator.present {\r\n            background: #4CAF50;\r\n        }\r\n        \r\n        .status-indicator.absent {\r\n            background: #f44336;\r\n        }\r\n        \r\n        .status-indicator.remote {\r\n            background: #2196F3;\r\n        }\r\n        \r\n        .status-indicator.meeting {\r\n            background: #FF9800;\r\n        }\r\n        \r\n        .day-count {\r\n            font-size: 10px;\r\n            color: #666;\r\n            margin-top: 5px;\r\n        }\r\n        \r\n        .sidebar {\r\n            display: flex;\r\n            flex-direction: column;\r\n            gap: 20px;\r\n        }\r\n        \r\n        .day-detail {\r\n            background: rgba(255, 255, 255, 0.95);\r\n            backdrop-filter: blur(10px);\r\n            border-radius: 20px;\r\n            padding: 25px;\r\n            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\r\n        }\r\n        \r\n        .day-detail h3 {\r\n            color: #333;\r\n            margin-bottom: 20px;\r\n            font-size: 1.3rem;\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 10px;\r\n        }\r\n        \r\n        .presence-list {\r\n            max-height: 400px;\r\n            overflow-y: auto;\r\n        }\r\n        \r\n        .employee-item {\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 12px;\r\n            padding: 12px;\r\n            margin-bottom: 8px;\r\n            background: #f8f9fa;\r\n            border-radius: 8px;\r\n            border-left: 4px solid;\r\n        }\r\n        \r\n        .employee-item.present {\r\n            border-left-color: #4CAF50;\r\n        }\r\n        \r\n        .employee-item.absent {\r\n            border-left-color: #f44336;\r\n        }\r\n        \r\n        .employee-item.remote {\r\n            border-left-color: #2196F3;\r\n        }\r\n        \r\n        .employee-item.meeting {\r\n            border-left-color: #FF9800;\r\n        }\r\n        \r\n        .employee-avatar {\r\n            width: 35px;\r\n            height: 35px;\r\n            border-radius: 50%;\r\n            background: linear-gradient(135deg, #667eea, #764ba2);\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            color: white;\r\n            font-weight: 600;\r\n            font-size: 14px;\r\n        }\r\n        \r\n        .employee-info {\r\n            flex: 1;\r\n        }\r\n        \r\n        .employee-name {\r\n            font-weight: 600;\r\n            color: #333;\r\n            margin-bottom: 2px;\r\n        }\r\n        \r\n        .employee-status {\r\n            font-size: 12px;\r\n            text-transform: uppercase;\r\n            font-weight: 600;\r\n            letter-spacing: 0.5px;\r\n        }\r\n        \r\n        .employee-status.present {\r\n            color: #4CAF50;\r\n        }\r\n        \r\n        .employee-status.absent {\r\n            color: #f44336;\r\n        }\r\n        \r\n        .employee-status.remote {\r\n            color: #2196F3;\r\n        }\r\n        \r\n        .employee-status.meeting {\r\n            color: #FF9800;\r\n        }\r\n        \r\n        .planning-controls {\r\n            background: rgba(255, 255, 255, 0.95);\r\n            backdrop-filter: blur(10px);\r\n            border-radius: 20px;\r\n            padding: 25px;\r\n            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\r\n        }\r\n        \r\n        .control-section {\r\n            margin-bottom: 20px;\r\n            padding-bottom: 15px;\r\n            border-bottom: 1px solid #eee;\r\n        }\r\n        \r\n        .control-section:last-child {\r\n            border-bottom: none;\r\n            margin-bottom: 0;\r\n        }\r\n        \r\n        .control-section h4 {\r\n            color: #333;\r\n            margin-bottom: 15px;\r\n            font-size: 1.1rem;\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 8px;\r\n        }\r\n        \r\n        .form-group {\r\n            margin-bottom: 15px;\r\n        }\r\n        \r\n        label {\r\n            display: block;\r\n            margin-bottom: 8px;\r\n            font-weight: 600;\r\n            color: #555;\r\n            font-size: 14px;\r\n        }\r\n        \r\n        select,\r\n        input {\r\n            width: 100%;\r\n            padding: 12px;\r\n            border: 2px solid #e0e0e0;\r\n            border-radius: 8px;\r\n            font-size: 14px;\r\n            transition: border-color 0.3s;\r\n            background: white;\r\n        }\r\n        \r\n        select:focus,\r\n        input:focus {\r\n            outline: none;\r\n            border-color: #4CAF50;\r\n        }\r\n        \r\n        .btn {\r\n            background: linear-gradient(135deg, #4CAF50, #45a049);\r\n            color: white;\r\n            border: none;\r\n            padding: 12px 20px;\r\n            border-radius: 8px;\r\n            cursor: pointer;\r\n            font-size: 14px;\r\n            font-weight: 600;\r\n            transition: all 0.3s;\r\n            width: 100%;\r\n            margin-bottom: 8px;\r\n        }\r\n        \r\n        .btn:hover {\r\n            transform: translateY(-2px);\r\n            box-shadow: 0 8px 20px rgba(76, 175, 80, 0.3);\r\n        }\r\n        \r\n        .btn-secondary {\r\n            background: linear-gradient(135deg, #2196F3, #1976D2);\r\n        }\r\n        \r\n        .btn-secondary:hover {\r\n            box-shadow: 0 8px 20px rgba(33, 150, 243, 0.3);\r\n        }\r\n        \r\n        .stats-summary {\r\n            display: grid;\r\n            grid-template-columns: repeat(2, 1fr);\r\n            gap: 10px;\r\n            margin-top: 15px;\r\n        }\r\n        \r\n        .stat-item {\r\n            text-align: center;\r\n            padding: 10px;\r\n            background: #f8f9fa;\r\n            border-radius: 8px;\r\n            border-left: 3px solid;\r\n        }\r\n        \r\n        .stat-item.present {\r\n            border-left-color: #4CAF50;\r\n        }\r\n        \r\n        .stat-item.absent {\r\n            border-left-color: #f44336;\r\n        }\r\n        \r\n        .stat-item.remote {\r\n            border-left-color: #2196F3;\r\n        }\r\n        \r\n        .stat-item.meeting {\r\n            border-left-color: #FF9800;\r\n        }\r\n        \r\n        .stat-number {\r\n            font-size: 1.5rem;\r\n            font-weight: 700;\r\n            margin-bottom: 2px;\r\n        }\r\n        \r\n        .stat-label {\r\n            font-size: 11px;\r\n            text-transform: uppercase;\r\n            color: #666;\r\n            font-weight: 600;\r\n        }\r\n        \r\n        .no-data {\r\n            text-align: center;\r\n            color: #666;\r\n            padding: 40px 20px;\r\n            font-style: italic;\r\n        }\r\n        \r\n        .legend {\r\n            display: flex;\r\n            justify-content: center;\r\n            gap: 20px;\r\n            margin-top: 15px;\r\n            flex-wrap: wrap;\r\n        }\r\n        \r\n        .legend-item {\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 6px;\r\n            font-size: 12px;\r\n            color: #666;\r\n        }\r\n        \r\n        @media (max-width: 1200px) {\r\n            .main-layout {\r\n                grid-template-columns: 1fr;\r\n            }\r\n            .sidebar {\r\n                flex-direction: row;\r\n            }\r\n        }\r\n        \r\n        @media (max-width: 768px) {\r\n            .header h1 {\r\n                font-size: 2rem;\r\n            }\r\n            .header-controls {\r\n                flex-direction: column;\r\n                gap: 15px;\r\n            }\r\n            .calendar-day {\r\n                min-height: 80px;\r\n                padding: 5px 3px;\r\n            }\r\n            .sidebar {\r\n                flex-direction: column;\r\n            }\r\n        }\r\n    </style>\r\n</head>\r\n\r\n<body>\r\n    <div class=\"container\">\r\n        <!-- Header -->\r\n        <div class=\"header\">\r\n            <h1>üìÖ Planning des Pr√©sences</h1>\r\n            <p>Calendrier interactif avec suivi des √©quipes</p>\r\n\r\n            <div class=\"header-controls\">\r\n                <div class=\"month-nav\">\r\n                    <button class=\"nav-btn\" onclick=\"previousMonth()\">‚Äπ</button>\r\n                    <div class=\"current-month\" id=\"currentMonth\"></div>\r\n                    <button class=\"nav-btn\" onclick=\"nextMonth()\">‚Ä∫</button>\r\n                </div>\r\n\r\n                <button class=\"btn btn-secondary\" onclick=\"goToToday()\" style=\"width: auto; padding: 8px 16px;\">Aujourd'hui</button>\r\n            </div>\r\n\r\n            <div class=\"legend\">\r\n                <div class=\"legend-item\">\r\n                    <div class=\"status-indicator present\"></div>\r\n                    <span>Pr√©sent</span>\r\n                </div>\r\n                <div class=\"legend-item\">\r\n                    <div class=\"status-indicator remote\"></div>\r\n                    <span>T√©l√©travail</span>\r\n                </div>\r\n                <div class=\"legend-item\">\r\n                    <div class=\"status-indicator meeting\"></div>\r\n                    <span>R√©union</span>\r\n                </div>\r\n                <div class=\"legend-item\">\r\n                    <div class=\"status-indicator absent\"></div>\r\n                    <span>Absent</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n        <!-- Layout principal -->\r\n        <div class=\"main-layout\">\r\n            <!-- Section Calendrier -->\r\n            <div class=\"calendar-section\">\r\n                <div class=\"calendar-grid\" id=\"calendarGrid\">\r\n                    <!-- Le calendrier sera g√©n√©r√© ici -->\r\n                </div>\r\n            </div>\r\n\r\n            <!-- Sidebar -->\r\n            <div class=\"sidebar\">\r\n                <!-- D√©tails du jour s√©lectionn√© -->\r\n                <div class=\"day-detail\">\r\n                    <h3 id=\"selectedDayTitle\">üìã S√©lectionnez un jour</h3>\r\n\r\n                    <div class=\"stats-summary\" id=\"dayStats\">\r\n                        <div class=\"stat-item present\">\r\n                            <div class=\"stat-number\" id=\"dayPresentCount\">0</div>\r\n                            <div class=\"stat-label\">Pr√©sents</div>\r\n                        </div>\r\n                        <div class=\"stat-item remote\">\r\n                            <div class=\"stat-number\" id=\"dayRemoteCount\">0</div>\r\n                            <div class=\"stat-label\">T√©l√©travail</div>\r\n                        </div>\r\n                        <div class=\"stat-item meeting\">\r\n                            <div class=\"stat-number\" id=\"dayMeetingCount\">0</div>\r\n                            <div class=\"stat-label\">R√©unions</div>\r\n                        </div>\r\n                        <div class=\"stat-item absent\">\r\n                            <div class=\"stat-number\" id=\"dayAbsentCount\">0</div>\r\n                            <div class=\"stat-label\">Absents</div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"presence-list\" id=\"dayPresenceList\">\r\n                        <div class=\"no-data\">S√©lectionnez un jour pour voir les pr√©sences</div>\r\n                    </div>\r\n                </div>\r\n\r\n                <!-- Contr√¥les de planning -->\r\n                <div class=\"planning-controls\">\r\n                    <div class=\"control-section\">\r\n                        <h4>üìù Planifier Pr√©sence</h4>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"planEmployee\">Employ√©</label>\r\n                            <select id=\"planEmployee\">\r\n                                <option value=\"\">S√©lectionner...</option>\r\n                            </select>\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"planDate\">Date</label>\r\n                            <input type=\"date\" id=\"planDate\">\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"planStatus\">Statut</label>\r\n                            <select id=\"planStatus\">\r\n                                <option value=\"present\">‚úÖ Pr√©sent</option>\r\n                                <option value=\"absent\">‚ùå Absent</option>\r\n                                <option value=\"remote\">üè† T√©l√©travail</option>\r\n                                <option value=\"meeting\">ü§ù En r√©union</option>\r\n                            </select>\r\n                        </div>\r\n                        <button class=\"btn\" onclick=\"planPresence()\">Planifier</button>\r\n                    </div>\r\n\r\n                    <div class=\"control-section\">\r\n                        <h4>üë§ Ma Pr√©sence</h4>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"myName\">Mon nom</label>\r\n                            <input type=\"text\" id=\"myName\" placeholder=\"Entrez votre nom\" value=\"\">\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"myStartDate\">Date de d√©but</label>\r\n                            <input type=\"date\" id=\"myStartDate\">\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"myEndDate\">Date de fin</label>\r\n                            <input type=\"date\" id=\"myEndDate\">\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label for=\"myStatus\">Mon statut</label>\r\n                            <select id=\"myStatus\">\r\n                                <option value=\"present\">‚úÖ Pr√©sent</option>\r\n                                <option value=\"absent\">‚ùå Absent</option>\r\n                                <option value=\"remote\">üè† T√©l√©travail</option>\r\n                                <option value=\"meeting\">ü§ù En r√©union</option>\r\n                            </select>\r\n                        </div>\r\n                        <div class=\"form-group\">\r\n                            <label>\r\n                                <input type=\"checkbox\" id=\"excludeWeekends\" checked style=\"width: auto; margin-right: 8px;\">\r\n                                Exclure les week-ends\r\n                            </label>\r\n                        </div>\r\n                        <button class=\"btn\" onclick=\"setMyPresenceRange()\">D√©clarer ma pr√©sence</button>\r\n                        <button class=\"btn btn-secondary\" onclick=\"setTodayOnly()\" style=\"margin-top: 5px;\">Aujourd'hui seulement</button>\r\n                    </div>\r\n\r\n                    <div class=\"control-section\">\r\n                        <h4>üìä Export Excel</h4>\r\n                        <button class=\"btn btn-secondary\" onclick=\"exportMonthExcel()\">üìÑ Export Mois Excel</button>\r\n                        <button class=\"btn btn-secondary\" onclick=\"exportWeekExcel()\">üìã Export Semaine Excel</button>\r\n                        <button class=\"btn btn-secondary\" onclick=\"exportDayExcel()\">üìù Export Jour Excel</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <script>\r\n        // Variables globales\r\n        let currentDate = new Date();\r\n        let selectedDate = null;\r\n        let planningData = JSON.parse(localStorage.getItem('planningData')) || {};\r\n\r\n        // Donn√©es d'exemple\r\n        if (Object.keys(planningData).length === 0) {\r\n            // G√©n√©rer des donn√©es pour les 30 derniers jours\r\n            const employees = [\"Alice Martin\", \"Bob Durand\", \"Claire Dubois\", \"David Moreau\", \"Emma Bernard\", \"Fran√ßois Petit\"];\r\n            const statuses = [\"present\", \"absent\", \"remote\", \"meeting\"];\r\n\r\n            for (let i = 0; i < 30; i++) {\r\n                const date = new Date();\r\n                date.setDate(date.getDate() - i);\r\n                const dateKey = date.toISOString().split('T')[0];\r\n\r\n                planningData[dateKey] = employees.map(name => ({\r\n                    name: name,\r\n                    status: statuses[Math.floor(Math.random() * statuses.length)],\r\n                    timestamp: date.toLocaleString('fr-FR')\r\n                }));\r\n            }\r\n            savePlanningData();\r\n        }\r\n\r\n        // Initialisation\r\n        document.addEventListener('DOMContentLoaded', function() {\r\n            updateCalendar();\r\n            updateEmployeeDropdown();\r\n            selectToday();\r\n\r\n            // Restaurer le nom sauvegard√©\r\n            const savedName = localStorage.getItem('myName');\r\n            if (savedName) {\r\n                document.getElementById('myName').value = savedName;\r\n            }\r\n\r\n            // Initialiser les dates √† aujourd'hui\r\n            const today = new Date().toISOString().split('T')[0];\r\n            document.getElementById('myStartDate').value = today;\r\n            document.getElementById('myEndDate').value = today;\r\n        });\r\n\r\n        // Mise √† jour du calendrier\r\n        function updateCalendar() {\r\n            updateMonthDisplay();\r\n            generateCalendarGrid();\r\n        }\r\n\r\n        // Mise √† jour de l'affichage du mois\r\n        function updateMonthDisplay() {\r\n            const months = [\r\n                'Janvier', 'F√©vrier', 'Mars', 'Avril', 'Mai', 'Juin',\r\n                'Juillet', 'Ao√ªt', 'Septembre', 'Octobre', 'Novembre', 'D√©cembre'\r\n            ];\r\n\r\n            document.getElementById('currentMonth').textContent =\r\n                `${months[currentDate.getMonth()]} ${currentDate.getFullYear()}`;\r\n        }\r\n\r\n        // G√©n√©ration de la grille du calendrier\r\n        function generateCalendarGrid() {\r\n            const grid = document.getElementById('calendarGrid');\r\n\r\n            // Headers des jours\r\n            const dayHeaders = ['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim'];\r\n            grid.innerHTML = dayHeaders.map(day =>\r\n                `<div class=\"calendar-header\">${day}</div>`\r\n            ).join('');\r\n\r\n            // Calcul des dates\r\n            const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\r\n            const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\r\n            const startDate = new Date(firstDay);\r\n\r\n            // Ajuster pour commencer le lundi\r\n            const dayOfWeek = firstDay.getDay();\r\n            const daysToSubtract = dayOfWeek === 0 ? 6 : dayOfWeek - 1;\r\n            startDate.setDate(startDate.getDate() - daysToSubtract);\r\n\r\n            // G√©n√©rer 42 jours (6 semaines)\r\n            for (let i = 0; i < 42; i++) {\r\n                const cellDate = new Date(startDate);\r\n                cellDate.setDate(startDate.getDate() + i);\r\n\r\n                const dayElement = createDayElement(cellDate);\r\n                grid.appendChild(dayElement);\r\n            }\r\n        }\r\n\r\n        // Cr√©ation d'un √©l√©ment jour\r\n        function createDayElement(date) {\r\n            const dayDiv = document.createElement('div');\r\n            dayDiv.className = 'calendar-day';\r\n\r\n            const dateKey = date.toISOString().split('T')[0];\r\n            const dayData = planningData[dateKey] || [];\r\n\r\n            // Classes CSS\r\n            const isCurrentMonth = date.getMonth() === currentDate.getMonth();\r\n            const isToday = date.toDateString() === new Date().toDateString();\r\n            const isSelected = selectedDate && date.toDateString() === selectedDate.toDateString();\r\n\r\n            if (!isCurrentMonth) dayDiv.classList.add('other-month');\r\n            if (isToday) dayDiv.classList.add('today');\r\n            if (isSelected) dayDiv.classList.add('selected');\r\n\r\n            // Contenu\r\n            const statusCounts = getStatusCounts(dayData);\r\n            const indicators = Object.entries(statusCounts).map(([status, count]) =>\r\n                count > 0 ? `<span class=\"status-indicator ${status}\" title=\"${count} ${getStatusLabel(status)}\"></span>`.repeat(Math.min(count, 5)) : ''\r\n            ).join('');\r\n\r\n            dayDiv.innerHTML = `\r\n                <div class=\"day-number\">${date.getDate()}</div>\r\n                <div class=\"day-summary\">${indicators}</div>\r\n                <div class=\"day-count\">${dayData.length} pers.</div>\r\n            `;\r\n\r\n            dayDiv.onclick = () => selectDay(date);\r\n\r\n            return dayDiv;\r\n        }\r\n\r\n        // S√©lection d'un jour\r\n        function selectDay(date) {\r\n            selectedDate = new Date(date);\r\n            updateCalendar();\r\n            updateDayDetail();\r\n        }\r\n\r\n        // Mise √† jour des d√©tails du jour\r\n        function updateDayDetail() {\r\n            if (!selectedDate) return;\r\n\r\n            const dateKey = selectedDate.toISOString().split('T')[0];\r\n            const dayData = planningData[dateKey] || [];\r\n\r\n            // Titre\r\n            const title = selectedDate.toLocaleDateString('fr-FR', {\r\n                weekday: 'long',\r\n                year: 'numeric',\r\n                month: 'long',\r\n                day: 'numeric'\r\n            });\r\n            document.getElementById('selectedDayTitle').innerHTML = `üìã ${title}`;\r\n\r\n            // Statistiques\r\n            const statusCounts = getStatusCounts(dayData);\r\n            document.getElementById('dayPresentCount').textContent = statusCounts.present || 0;\r\n            document.getElementById('dayRemoteCount').textContent = statusCounts.remote || 0;\r\n            document.getElementById('dayMeetingCount').textContent = statusCounts.meeting || 0;\r\n            document.getElementById('dayAbsentCount').textContent = statusCounts.absent || 0;\r\n\r\n            // Liste des employ√©s\r\n            const listContainer = document.getElementById('dayPresenceList');\r\n\r\n            if (dayData.length === 0) {\r\n                listContainer.innerHTML = '<div class=\"no-data\">Aucune donn√©e pour ce jour</div>';\r\n                return;\r\n            }\r\n\r\n            const sortedData = [...dayData].sort((a, b) => a.name.localeCompare(b.name));\r\n\r\n            listContainer.innerHTML = sortedData.map(employee => `\r\n                <div class=\"employee-item ${employee.status}\">\r\n                    <div class=\"employee-avatar\">${employee.name.charAt(0)}</div>\r\n                    <div class=\"employee-info\">\r\n                        <div class=\"employee-name\">${employee.name}</div>\r\n                        <div class=\"employee-status ${employee.status}\">${getStatusLabel(employee.status)}</div>\r\n                    </div>\r\n                </div>\r\n            `).join('');\r\n        }\r\n\r\n        // Fonctions utilitaires\r\n        function getStatusCounts(data) {\r\n            return data.reduce((counts, item) => {\r\n                counts[item.status] = (counts[item.status] || 0) + 1;\r\n                return counts;\r\n            }, {});\r\n        }\r\n\r\n        function getStatusLabel(status) {\r\n            const labels = {\r\n                'present': 'Pr√©sent',\r\n                'absent': 'Absent',\r\n                'remote': 'T√©l√©travail',\r\n                'meeting': 'En r√©union'\r\n            };\r\n            return labels[status] || status;\r\n        }\r\n\r\n        // Navigation du calendrier\r\n        function previousMonth() {\r\n            currentDate.setMonth(currentDate.getMonth() - 1);\r\n            updateCalendar();\r\n        }\r\n\r\n        function nextMonth() {\r\n            currentDate.setMonth(currentDate.getMonth() + 1);\r\n            updateCalendar();\r\n        }\r\n\r\n        function goToToday() {\r\n            currentDate = new Date();\r\n            updateCalendar();\r\n            selectToday();\r\n        }\r\n\r\n        function selectToday() {\r\n            selectDay(new Date());\r\n        }\r\n\r\n        // Mise √† jour du dropdown employ√©s\r\n        function updateEmployeeDropdown() {\r\n            const dropdown = document.getElementById('planEmployee');\r\n            const allEmployees = new Set();\r\n\r\n            Object.values(planningData).forEach(dayData => {\r\n                dayData.forEach(employee => allEmployees.add(employee.name));\r\n            });\r\n\r\n            dropdown.innerHTML = '<option value=\"\">S√©lectionner...</option>' +\r\n                Array.from(allEmployees).sort().map(name =>\r\n                    `<option value=\"${name}\">${name}</option>`\r\n                ).join('');\r\n        }\r\n\r\n        // Planification de pr√©sence\r\n        function planPresence() {\r\n            const employee = document.getElementById('planEmployee').value;\r\n            const date = document.getElementById('planDate').value;\r\n            const status = document.getElementById('planStatus').value;\r\n\r\n            if (!employee || !date) {\r\n                alert('Veuillez remplir tous les champs');\r\n                return;\r\n            }\r\n\r\n            if (!planningData[date]) {\r\n                planningData[date] = [];\r\n            }\r\n\r\n            // V√©rifier si l'employ√© a d√©j√† une entr√©e pour ce jour\r\n            const existingIndex = planningData[date].findIndex(p => p.name === employee);\r\n\r\n            if (existingIndex !== -1) {\r\n                if (confirm(`${employee} a d√©j√† une entr√©e pour ce jour. Mettre √† jour?`)) {\r\n                    planningData[date][existingIndex].status = status;\r\n                    planningData[date][existingIndex].timestamp = new Date().toLocaleString('fr-FR');\r\n                }\r\n            } else {\r\n                planningData[date].push({\r\n                    name: employee,\r\n                    status: status,\r\n                    timestamp: new Date().toLocaleString('fr-FR')\r\n                });\r\n            }\r\n\r\n            savePlanningData();\r\n            updateCalendar();\r\n\r\n            // Si c'est le jour s√©lectionn√©, mettre √† jour les d√©tails\r\n            if (selectedDate && selectedDate.toISOString().split('T')[0] === date) {\r\n                updateDayDetail();\r\n            }\r\n\r\n            showNotification(`Planning mis √† jour pour ${employee}`);\r\n\r\n            // R√©initialiser le formulaire\r\n            document.getElementById('planEmployee').value = '';\r\n            document.getElementById('planDate').value = '';\r\n        }\r\n\r\n        // Ma pr√©sence sur une plage de dates\r\n        function setMyPresenceRange() {\r\n            const myName = document.getElementById('myName').value.trim();\r\n            const startDate = document.getElementById('myStartDate').value;\r\n            const endDate = document.getElementById('myEndDate').value;\r\n            const myStatus = document.getElementById('myStatus').value;\r\n            const excludeWeekends = document.getElementById('excludeWeekends').checked;\r\n\r\n            if (!myName) {\r\n                alert('Veuillez entrer votre nom');\r\n                return;\r\n            }\r\n\r\n            if (!startDate || !endDate) {\r\n                alert('Veuillez s√©lectionner une date de d√©but et de fin');\r\n                return;\r\n            }\r\n\r\n            if (new Date(startDate) > new Date(endDate)) {\r\n                alert('La date de d√©but doit √™tre ant√©rieure √† la date de fin');\r\n                return;\r\n            }\r\n\r\n            let daysUpdated = 0;\r\n            const start = new Date(startDate);\r\n            const end = new Date(endDate);\r\n\r\n            // Parcourir chaque jour de la plage\r\n            for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {\r\n                // V√©rifier si on doit exclure les week-ends (samedi = 6, dimanche = 0)\r\n                if (excludeWeekends && (d.getDay() === 0 || d.getDay() === 6)) {\r\n                    continue;\r\n                }\r\n\r\n                const dateKey = d.toISOString().split('T')[0];\r\n\r\n                if (!planningData[dateKey]) {\r\n                    planningData[dateKey] = [];\r\n                }\r\n\r\n                // V√©rifier si j'ai d√©j√† une entr√©e pour ce jour\r\n                const existingIndex = planningData[dateKey].findIndex(p => p.name.toLowerCase() === myName.toLowerCase());\r\n\r\n                const entry = {\r\n                    name: myName,\r\n                    status: myStatus,\r\n                    timestamp: new Date().toLocaleString('fr-FR')\r\n                };\r\n\r\n                if (existingIndex !== -1) {\r\n                    planningData[dateKey][existingIndex] = entry;\r\n                } else {\r\n                    planningData[dateKey].push(entry);\r\n                }\r\n\r\n                daysUpdated++;\r\n            }\r\n\r\n            // Sauvegarder le nom pour la prochaine fois\r\n            localStorage.setItem('myName', myName);\r\n\r\n            savePlanningData();\r\n            updateCalendar();\r\n\r\n            // Si un jour de la plage est s√©lectionn√©, mettre √† jour les d√©tails\r\n            if (selectedDate) {\r\n                const selectedDateKey = selectedDate.toISOString().split('T')[0];\r\n                if (selectedDateKey >= startDate && selectedDateKey <= endDate) {\r\n                    updateDayDetail();\r\n                }\r\n            }\r\n\r\n            const weekendText = excludeWeekends ? ' (week-ends exclus)' : '';\r\n            showNotification(`Pr√©sence d√©clar√©e sur ${daysUpdated} jour(s): ${getStatusLabel(myStatus)}${weekendText}`);\r\n        }\r\n\r\n        // Raccourci pour aujourd'hui seulement\r\n        function setTodayOnly() {\r\n            const today = new Date().toISOString().split('T')[0];\r\n            document.getElementById('myStartDate').value = today;\r\n            document.getElementById('myEndDate').value = today;\r\n            setMyPresenceRange();\r\n        }\r\n\r\n        // Fonctions d'export Excel\r\n        function exportMonthExcel() {\r\n            const monthData = [];\r\n            const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\r\n            const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\r\n\r\n            // En-t√™tes\r\n            const headers = ['Date', 'Jour', 'Employ√©', 'Statut', 'Timestamp'];\r\n            monthData.push(headers);\r\n\r\n            // Donn√©es du mois\r\n            for (let d = new Date(firstDay); d <= lastDay; d.setDate(d.getDate() + 1)) {\r\n                const dateKey = d.toISOString().split('T')[0];\r\n                const dayData = planningData[dateKey] || [];\r\n                const dayName = d.toLocaleDateString('fr-FR', {\r\n                    weekday: 'long'\r\n                });\r\n                const dateStr = d.toLocaleDateString('fr-FR');\r\n\r\n                if (dayData.length === 0) {\r\n                    monthData.push([dateStr, dayName, 'Aucune donn√©e', '', '']);\r\n                } else {\r\n                    dayData.forEach(employee => {\r\n                        monthData.push([\r\n                            dateStr,\r\n                            dayName,\r\n                            employee.name,\r\n                            getStatusLabel(employee.status),\r\n                            employee.timestamp\r\n                        ]);\r\n                    });\r\n                }\r\n            }\r\n\r\n            downloadExcel(monthData, `Planning_${currentDate.getFullYear()}_${String(currentDate.getMonth() + 1).padStart(2, '0')}`);\r\n        }\r\n\r\n        function exportWeekExcel() {\r\n            if (!selectedDate) {\r\n                alert('Veuillez s√©lectionner un jour pour exporter la semaine');\r\n                return;\r\n            }\r\n\r\n            const weekData = [];\r\n            const weekStart = new Date(selectedDate);\r\n            const dayOfWeek = weekStart.getDay();\r\n            const daysToSubtract = dayOfWeek === 0 ? 6 : dayOfWeek - 1;\r\n            weekStart.setDate(weekStart.getDate() - daysToSubtract);\r\n\r\n            // En-t√™tes\r\n            const headers = ['Date', 'Jour', 'Employ√©', 'Statut', 'Timestamp'];\r\n            weekData.push(headers);\r\n\r\n            // Donn√©es de la semaine\r\n            for (let i = 0; i < 7; i++) {\r\n                const day = new Date(weekStart);\r\n                day.setDate(weekStart.getDate() + i);\r\n                const dateKey = day.toISOString().split('T')[0];\r\n                const dayData = planningData[dateKey] || [];\r\n                const dayName = day.toLocaleDateString('fr-FR', {\r\n                    weekday: 'long'\r\n                });\r\n                const dateStr = day.toLocaleDateString('fr-FR');\r\n\r\n                if (dayData.length === 0) {\r\n                    weekData.push([dateStr, dayName, 'Aucune donn√©e', '', '']);\r\n                } else {\r\n                    dayData.forEach(employee => {\r\n                        weekData.push([\r\n                            dateStr,\r\n                            dayName,\r\n                            employee.name,\r\n                            getStatusLabel(employee.status),\r\n                            employee.timestamp\r\n                        ]);\r\n                    });\r\n                }\r\n            }\r\n\r\n            const weekStartStr = weekStart.toLocaleDateString('fr-FR').replace(/\\//g, '-');\r\n            downloadExcel(weekData, `Semaine_${weekStartStr}`);\r\n        }\r\n\r\n        function exportDayExcel() {\r\n            if (!selectedDate) {\r\n                alert('Veuillez s√©lectionner un jour pour exporter');\r\n                return;\r\n            }\r\n\r\n            const dateKey = selectedDate.toISOString().split('T')[0];\r\n            const dayData = planningData[dateKey] || [];\r\n            const dayExport = [];\r\n\r\n            // Informations du jour\r\n            const dayName = selectedDate.toLocaleDateString('fr-FR', {\r\n                weekday: 'long'\r\n            });\r\n            const dateStr = selectedDate.toLocaleDateString('fr-FR');\r\n\r\n            // En-t√™tes\r\n            dayExport.push(['Planning du', dateStr, `(${dayName})`]);\r\n            dayExport.push(['']); // Ligne vide\r\n            dayExport.push(['Employ√©', 'Statut', 'Timestamp']);\r\n\r\n            // Statistiques\r\n            const stats = getStatusCounts(dayData);\r\n            dayExport.push(['']); // Ligne vide\r\n            dayExport.push(['STATISTIQUES']);\r\n            dayExport.push(['Pr√©sents', stats.present || 0]);\r\n            dayExport.push(['Absents', stats.absent || 0]);\r\n            dayExport.push(['T√©l√©travail', stats.remote || 0]);\r\n            dayExport.push(['En r√©union', stats.meeting || 0]);\r\n            dayExport.push(['Total', dayData.length]);\r\n            dayExport.push(['']); // Ligne vide\r\n\r\n            // Donn√©es d√©taill√©es\r\n            dayExport.push(['D√âTAIL DES PR√âSENCES']);\r\n            if (dayData.length === 0) {\r\n                dayExport.push(['Aucune donn√©e pour ce jour']);\r\n            } else {\r\n                const sortedData = [...dayData].sort((a, b) => a.name.localeCompare(b.name));\r\n                sortedData.forEach(employee => {\r\n                    dayExport.push([\r\n                        employee.name,\r\n                        getStatusLabel(employee.status),\r\n                        employee.timestamp\r\n                    ]);\r\n                });\r\n            }\r\n\r\n            const dateForFile = selectedDate.toLocaleDateString('fr-FR').replace(/\\//g, '-');\r\n            downloadExcel(dayExport, `Jour_${dateForFile}`);\r\n        }\r\n\r\n        // Fonction pour t√©l√©charger un fichier Excel\r\n        function downloadExcel(data, filename) {\r\n            // Cr√©er un contenu CSV\r\n            const csvContent = data.map(row =>\r\n                row.map(cell => {\r\n                    // Encapsuler les cellules qui contiennent des virgules ou des guillemets\r\n                    if (typeof cell === 'string' && (cell.includes(',') || cell.includes('\"') || cell.includes('\\n'))) {\r\n                        return `\"${cell.replace(/\"/g, '\"\"')}\"`;\r\n                    }\r\n                    return cell;\r\n                }).join(',')\r\n            ).join('\\n');\r\n\r\n            // Ajouter le BOM UTF-8 pour Excel\r\n            const BOM = '\\uFEFF';\r\n            const csvWithBOM = BOM + csvContent;\r\n\r\n            // Cr√©er et t√©l√©charger le fichier\r\n            const blob = new Blob([csvWithBOM], {\r\n                type: 'text/csv;charset=utf-8;'\r\n            });\r\n            const link = document.createElement('a');\r\n\r\n            if (link.download !== undefined) {\r\n                const url = URL.createObjectURL(blob);\r\n                link.setAttribute('href', url);\r\n                link.setAttribute('download', `${filename}.csv`);\r\n                link.style.visibility = 'hidden';\r\n                document.body.appendChild(link);\r\n                link.click();\r\n                document.body.removeChild(link);\r\n            }\r\n\r\n            showNotification(`Fichier ${filename}.csv t√©l√©charg√©`);\r\n        }\r\n\r\n        // Fonctions utilitaires\r\n        function savePlanningData() {\r\n            localStorage.setItem('planningData', JSON.stringify(planningData));\r\n        }\r\n\r\n\r\n\r\n        function showNotification(message) {\r\n            const notification = document.createElement('div');\r\n            notification.style.cssText = `\r\n                position: fixed;\r\n                top: 20px;\r\n                right: 20px;\r\n                background: #4CAF50;\r\n                color: white;\r\n                padding: 15px 20px;\r\n                border-radius: 8px;\r\n                box-shadow: 0 5px 15px rgba(0,0,0,0.2);\r\n                z-index: 1000;\r\n                animation: slideIn 0.3s ease;\r\n                font-weight: 600;\r\n            `;\r\n            notification.textContent = message;\r\n\r\n            // Ajouter l'animation CSS\r\n            if (!document.getElementById('notification-styles')) {\r\n                const style = document.createElement('style');\r\n                style.id = 'notification-styles';\r\n                style.textContent = `\r\n                    @keyframes slideIn {\r\n                        from { transform: translateX(100%); opacity: 0; }\r\n                        to { transform: translateX(0); opacity: 1; }\r\n                    }\r\n                    @keyframes slideOut {\r\n                        from { transform: translateX(0); opacity: 1; }\r\n                        to { transform: translateX(100%); opacity: 0; }\r\n                    }\r\n                `;\r\n                document.head.appendChild(style);\r\n            }\r\n\r\n            document.body.appendChild(notification);\r\n\r\n            // Supprimer apr√®s 3 secondes\r\n            setTimeout(() => {\r\n                notification.style.animation = 'slideOut 0.3s ease';\r\n                setTimeout(() => notification.remove(), 300);\r\n            }, 3000);\r\n        }\r\n\r\n        // API pour int√©gration Make\r\n        window.PlanningAPI = {\r\n            getPlanningData: () => planningData,\r\n            getDayData: (date) => {\r\n                const dateKey = date.toISOString ? date.toISOString().split('T')[0] : date;\r\n                return planningData[dateKey] || [];\r\n            },\r\n            getMonthData: (year, month) => {\r\n                const monthData = {};\r\n                const firstDay = new Date(year, month - 1, 1);\r\n                const lastDay = new Date(year, month, 0);\r\n\r\n                for (let d = new Date(firstDay); d <= lastDay; d.setDate(d.getDate() + 1)) {\r\n                    const dateKey = d.toISOString().split('T')[0];\r\n                    if (planningData[dateKey]) {\r\n                        monthData[dateKey] = planningData[dateKey];\r\n                    }\r\n                }\r\n                return monthData;\r\n            },\r\n            addPlanning: (employee, date, status) => {\r\n                const dateKey = date.toISOString ? date.toISOString().split('T')[0] : date;\r\n\r\n                if (!planningData[dateKey]) {\r\n                    planningData[dateKey] = [];\r\n                }\r\n\r\n                const existingIndex = planningData[dateKey].findIndex(p => p.name === employee);\r\n                const entry = {\r\n                    name: employee,\r\n                    status: status,\r\n                    timestamp: new Date().toLocaleString('fr-FR')\r\n                };\r\n\r\n                if (existingIndex !== -1) {\r\n                    planningData[dateKey][existingIndex] = entry;\r\n                } else {\r\n                    planningData[dateKey].push(entry);\r\n                }\r\n\r\n                savePlanningData();\r\n                updateCalendar();\r\n                if (selectedDate && selectedDate.toISOString().split('T')[0] === dateKey) {\r\n                    updateDayDetail();\r\n                }\r\n\r\n                return entry;\r\n            },\r\n            removeEmployee: (employee, date) => {\r\n                const dateKey = date.toISOString ? date.toISOString().split('T')[0] : date;\r\n\r\n                if (planningData[dateKey]) {\r\n                    planningData[dateKey] = planningData[dateKey].filter(p => p.name !== employee);\r\n                    if (planningData[dateKey].length === 0) {\r\n                        delete planningData[dateKey];\r\n                    }\r\n                    savePlanningData();\r\n                    updateCalendar();\r\n                    if (selectedDate && selectedDate.toISOString().split('T')[0] === dateKey) {\r\n                        updateDayDetail();\r\n                    }\r\n                }\r\n            },\r\n            clearData: () => {\r\n                planningData = {};\r\n                savePlanningData();\r\n                updateCalendar();\r\n                updateDayDetail();\r\n            },\r\n            refresh: () => {\r\n                updateCalendar();\r\n                updateDayDetail();\r\n                updateEmployeeDropdown();\r\n            },\r\n            getStatistics: (startDate, endDate) => {\r\n                const stats = {\r\n                    totalDays: 0,\r\n                    employeeDays: 0,\r\n                    statusCounts: {\r\n                        present: 0,\r\n                        absent: 0,\r\n                        remote: 0,\r\n                        meeting: 0\r\n                    },\r\n                    employeeStats: {}\r\n                };\r\n\r\n                const start = new Date(startDate);\r\n                const end = new Date(endDate);\r\n\r\n                for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {\r\n                    const dateKey = d.toISOString().split('T')[0];\r\n                    const dayData = planningData[dateKey];\r\n\r\n                    if (dayData) {\r\n                        stats.totalDays++;\r\n                        stats.employeeDays += dayData.length;\r\n\r\n                        dayData.forEach(employee => {\r\n                            stats.statusCounts[employee.status]++;\r\n\r\n                            if (!stats.employeeStats[employee.name]) {\r\n                                stats.employeeStats[employee.name] = {\r\n                                    present: 0,\r\n                                    absent: 0,\r\n                                    remote: 0,\r\n                                    meeting: 0\r\n                                };\r\n                            }\r\n                            stats.employeeStats[employee.name][employee.status]++;\r\n                        });\r\n                    }\r\n                }\r\n\r\n                return stats;\r\n            }\r\n        };\r\n\r\n        // Initialiser la date d'aujourd'hui dans le formulaire\r\n        document.getElementById('planDate').value = new Date().toISOString().split('T')[0];\r\n    </script>\r\n</body>\r\n\r\n</html>\n\nA partir de toute les infos client que je vais te donner remplis et remplace tout ce qu'il faut dans le code html :\n{{9.text}}\n\nil me faut en sortie uniquement du code html, je ne veux pas de commentaire. je ne veut pas de balise, je ne veux pas ```html \n\n",
                                "assistantId": "asst_z3kQMKqJKEPBgjMLnatp9L9J"
                            },
                            "metadata": {
                                "designer": {
                                    "x": 887,
                                    "y": 209
                                },
                                "restore": {
                                    "expect": {
                                        "role": {
                                            "label": "User"
                                        },
                                        "model": {
                                            "mode": "chose"
                                        },
                                        "tools": {
                                            "mode": "chose"
                                        },
                                        "image_urls": {
                                            "mode": "chose"
                                        },
                                        "assistantId": {
                                            "mode": "chose",
                                            "label": " (gpt-4-turbo)",
                                            "nested": []
                                        },
                                        "image_files": {
                                            "mode": "chose"
                                        },
                                        "tool_choice": {
                                            "mode": "chose",
                                            "label": "Empty"
                                        },
                                        "response_format": {
                                            "mode": "chose",
                                            "label": "Empty"
                                        },
                                        "truncation_strategy": {
                                            "mode": "chose",
                                            "label": "Empty"
                                        },
                                        "file_search_resources": {
                                            "mode": "chose"
                                        },
                                        "code_interpreter_resources": {
                                            "mode": "chose"
                                        }
                                    },
                                    "parameters": {
                                        "__IMTCONN__": {
                                            "data": {
                                                "scoped": "true",
                                                "connection": "openai-gpt-3"
                                            },
                                            "label": "My OpenAI connection"
                                        }
                                    }
                                },
                                "parameters": [
                                    {
                                        "name": "__IMTCONN__",
                                        "type": "account:openai-gpt-3",
                                        "label": "Connection",
                                        "required": true
                                    }
                                ],
                                "expect": [
                                    {
                                        "name": "assistantId",
                                        "type": "select",
                                        "label": "Assistant",
                                        "required": true
                                    },
                                    {
                                        "name": "role",
                                        "type": "select",
                                        "label": "Role",
                                        "required": true,
                                        "validate": {
                                            "enum": [
                                                "user",
                                                "assistant"
                                            ]
                                        }
                                    },
                                    {
                                        "name": "threadId",
                                        "type": "text",
                                        "label": "Thread ID"
                                    },
                                    {
                                        "name": "model",
                                        "type": "select",
                                        "label": "Model"
                                    },
                                    {
                                        "name": "tools",
                                        "type": "select",
                                        "label": "Tools",
                                        "multiple": true,
                                        "validate": {
                                            "enum": [
                                                "file_search",
                                                "code_interpreter"
                                            ]
                                        }
                                    },
                                    {
                                        "name": "file_search_resources",
                                        "type": "select",
                                        "label": "File Search Resources"
                                    },
                                    {
                                        "name": "code_interpreter_resources",
                                        "type": "select",
                                        "label": "Code Interpreter Resources",
                                        "multiple": true,
                                        "validate": {
                                            "maxItems": 20
                                        }
                                    },
                                    {
                                        "name": "tool_choice",
                                        "type": "select",
                                        "label": "Tool Choice",
                                        "validate": {
                                            "enum": [
                                                "none",
                                                "auto",
                                                "required",
                                                "file_search",
                                                "code_interpreter",
                                                "function"
                                            ]
                                        }
                                    },
                                    {
                                        "name": "instructions",
                                        "type": "text",
                                        "label": "Instructions"
                                    },
                                    {
                                        "name": "max_prompt_tokens",
                                        "type": "uinteger",
                                        "label": "Max Prompt Tokens"
                                    },
                                    {
                                        "name": "max_completion_tokens",
                                        "type": "uinteger",
                                        "label": "Max Completion Tokens"
                                    },
                                    {
                                        "name": "temperature",
                                        "type": "number",
                                        "label": "Temperature",
                                        "validate": {
                                            "max": 2,
                                            "min": 0
                                        }
                                    },
                                    {
                                        "name": "top_p",
                                        "type": "number",
                                        "label": "Top P",
                                        "validate": {
                                            "max": 1,
                                            "min": 0
                                        }
                                    },
                                    {
                                        "name": "response_format",
                                        "type": "select",
                                        "label": "Response Format",
                                        "validate": {
                                            "enum": [
                                                "auto",
                                                "json_object",
                                                "text"
                                            ]
                                        }
                                    },
                                    {
                                        "name": "truncation_strategy",
                                        "type": "select",
                                        "label": "Truncation Strategy",
                                        "validate": {
                                            "enum": [
                                                "auto",
                                                "last_messages"
                                            ]
                                        }
                                    },
                                    {
                                        "name": "message",
                                        "type": "text",
                                        "label": "Message",
                                        "required": true
                                    },
                                    {
                                        "name": "image_files",
                                        "type": "select",
                                        "label": "Image Files",
                                        "multiple": true
                                    },
                                    {
                                        "name": "image_urls",
                                        "spec": {
                                            "name": "value",
                                            "type": "url",
                                            "label": "Image URL",
                                            "required": true
                                        },
                                        "type": "array",
                                        "label": "Image URLs"
                                    }
                                ]
                            }
                        },
                        {
                            "id": 2,
                            "module": "gateway:WebhookRespond",
                            "version": 1,
                            "parameters": {},
                            "mapper": {
                                "body": "{{13.content[].text.value}}",
                                "status": "200",
                                "headers": []
                            },
                            "metadata": {
                                "designer": {
                                    "x": 1138,
                                    "y": 21
                                },
                                "restore": {
                                    "expect": {
                                        "headers": {
                                            "mode": "chose"
                                        }
                                    }
                                },
                                "expect": [
                                    {
                                        "name": "status",
                                        "type": "uinteger",
                                        "label": "Status",
                                        "required": true,
                                        "validate": {
                                            "min": 100
                                        }
                                    },
                                    {
                                        "name": "body",
                                        "type": "any",
                                        "label": "Body"
                                    },
                                    {
                                        "name": "headers",
                                        "spec": [
                                            {
                                                "name": "key",
                                                "type": "text",
                                                "label": "Key",
                                                "required": true,
                                                "validate": {
                                                    "max": 256
                                                }
                                            },
                                            {
                                                "name": "value",
                                                "type": "text",
                                                "label": "Value",
                                                "required": true,
                                                "validate": {
                                                    "max": 4096
                                                }
                                            }
                                        ],
                                        "type": "array",
                                        "label": "Custom headers",
                                        "validate": {
                                            "maxItems": 16
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            ]
        }
    ],
    "metadata": {
        "instant": true,
        "version": 1,
        "scenario": {
            "roundtrips": 1,
            "maxErrors": 3,
            "autoCommit": true,
            "autoCommitTriggerLast": true,
            "sequential": false,
            "slots": null,
            "confidential": false,
            "dataloss": false,
            "dlq": false,
            "freshVariables": false
        },
        "designer": {
            "orphans": []
        },
        "zone": "eu2.make.com",
        "notes": []
    }
}